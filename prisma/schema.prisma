// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  PERSONAL
  COMPANY
}

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @map("user_id") @db.Uuid
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String?
  accessToken       String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id              String           @id @default(uuid()) @db.Uuid
  email           String           @unique
  emailVerified   DateTime?        @map("email_verified") @db.Timestamptz(6)
  password        String?
  imageUrl        String?          @map("image_url")
  userType        UserType?        @map("user_type")
  createdAt       DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime?        @updatedAt @map("updated_at") @db.Timestamptz(6)
  accounts        Account[]
  personalProfile PersonalProfile?
  companyProfile  CompanyProfile?

  @@map("users")
}

model PersonalProfile {
  userId    String    @id @map("user_id") @db.Uuid
  dni       String?   @unique
  firstName String?   @map("first_name")
  lastName  String?   @map("last_name")
  phone     String?
  address   String?
  birthDate DateTime? @map("birth_date") @db.Timestamptz(6)
  user      User      @relation(fields: [userId], references: [id])

  @@map("personal_profiles")
}

model CompanyProfile {
  userId       String  @id @map("user_id") @db.Uuid
  name         String?
  cuit         String? @unique
  phone        String?
  taxAddress   String? @map("tax_address")
  manager      String?
  managerEmail String? @map("manager_email")
  managerPhone String? @map("manager_phone")
  user         User    @relation(fields: [userId], references: [id])

  @@map("company_profiles")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}
