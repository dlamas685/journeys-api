// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  PERSONAL
  COMPANY
}

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @map("user_id") @db.Uuid
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String?
  accessToken       String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id               String             @id @default(uuid()) @db.Uuid
  email            String             @unique
  emailVerified    DateTime?          @map("email_verified") @db.Timestamptz(6)
  password         String?
  imageUrl         String?            @map("image_url")
  userType         UserType?          @map("user_type")
  createdAt        DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime?          @updatedAt @map("updated_at") @db.Timestamptz(6)
  accounts         Account[]
  personalProfile  PersonalProfile?
  companyProfile   CompanyProfile?
  FavoriteAddress  FavoriteAddress[]
  FavoritePlace    FavoritePlace[]
  ActivityTemplate ActivityTemplate[]
  Fleet            Fleet[]
  Vehicle          Vehicle[]
  Driver           Driver[]

  @@map("users")
}

model PersonalProfile {
  userId    String    @id @map("user_id") @db.Uuid
  dni       String?   @unique
  firstName String?   @map("first_name")
  lastName  String?   @map("last_name")
  phone     String?
  address   String?
  birthDate DateTime? @map("birth_date") @db.Timestamptz(6)
  user      User      @relation(fields: [userId], references: [id])

  @@map("personal_profiles")
}

model CompanyProfile {
  userId       String  @id @map("user_id") @db.Uuid
  name         String?
  cuit         String? @unique
  phone        String?
  taxAddress   String? @map("tax_address")
  manager      String?
  managerEmail String? @map("manager_email")
  managerPhone String? @map("manager_phone")
  user         User    @relation(fields: [userId], references: [id])

  @@map("company_profiles")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model FavoriteAddress {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  alias     String
  placeId   String    @map("place_id")
  latitude  Decimal
  longitude Decimal
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)
  user      User      @relation(fields: [userId], references: [id])

  @@unique([userId, alias])
  @@map("favorite_addresses")
}

model FavoritePlace {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  placeId   String    @map("place_id")
  latitude  Decimal
  longitude Decimal
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)
  user      User      @relation(fields: [userId], references: [id])

  @@unique([userId, placeId])
  @@map("favorite_places")
}

model ActivityTemplate {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  name        String
  description String?
  activities  Json?
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, name])
  @@map("activity_templates")
}

model Fleet {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  name        String
  description String?
  maxVehicles Int?      @map("max_vehicles") @db.SmallInt
  maxDrivers  Int?      @map("max_drivers") @db.SmallInt
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)

  user    User      @relation(fields: [userId], references: [id])
  Vehicle Vehicle[]
  Driver  Driver[]

  @@unique([userId, name])
  @@map("fleets")
}

model Vehicle {
  id           String    @id @default(uuid()) @db.Uuid
  userId       String    @map("user_id") @db.Uuid
  fleetId      String?   @map("fleet_id") @db.Uuid
  imageUrl     String?   @map("image_url")
  licensePlate String    @map("license_plate")
  make         String?
  model        String?
  year         Int?      @db.SmallInt
  vin          String?
  notes        String?
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)

  user  User   @relation(fields: [userId], references: [id])
  fleet Fleet? @relation(fields: [fleetId], references: [id])

  @@unique([userId, licensePlate])
  @@map("vehicles")
}

model Driver {
  id            String    @id @default(uuid()) @db.Uuid
  userId        String    @map("user_id") @db.Uuid
  fleetId       String?   @map("fleet_id") @db.Uuid
  licenseNumber String    @map("license_number")
  name          String
  imageUrl      String?   @map("image_url")
  notes         String?
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)

  user  User   @relation(fields: [userId], references: [id])
  fleet Fleet? @relation(fields: [fleetId], references: [id])

  @@unique([userId, licenseNumber])
  @@map("drivers")
}
