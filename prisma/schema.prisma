// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  PERSONAL
  COMPANY
}

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @map("user_id") @db.Uuid
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String?
  accessToken       String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id                String             @id @default(uuid()) @db.Uuid
  email             String             @unique
  emailVerified     DateTime?          @map("email_verified") @db.Timestamptz(6)
  password          String?
  imageUrl          String?            @map("image_url")
  userType          UserType?          @map("user_type")
  createdAt         DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime?          @updatedAt @map("updated_at") @db.Timestamptz(6)
  accounts          Account[]
  personalProfile   PersonalProfile?
  companyProfile    CompanyProfile?
  favoriteAddresses FavoriteAddress[]
  favoritePlaces    FavoritePlace[]
  activityTemplates ActivityTemplate[]
  fleets            Fleet[]
  vehicles          Vehicle[]
  drivers           Driver[]
  trips             Trip[]
  Post              Post[]
  Order             Order[]

  @@map("users")
}

model PersonalProfile {
  userId    String    @id @map("user_id") @db.Uuid
  dni       String?   @unique
  firstName String?   @map("first_name")
  lastName  String?   @map("last_name")
  phone     String?
  address   String?
  birthDate DateTime? @map("birth_date") @db.Timestamptz(6)
  user      User      @relation(fields: [userId], references: [id])

  @@map("personal_profiles")
}

model CompanyProfile {
  userId       String  @id @map("user_id") @db.Uuid
  name         String?
  cuit         String? @unique
  phone        String?
  taxAddress   String? @map("tax_address")
  manager      String?
  managerEmail String? @map("manager_email")
  managerPhone String? @map("manager_phone")
  user         User    @relation(fields: [userId], references: [id])

  @@map("company_profiles")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model FavoriteAddress {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  alias     String
  placeId   String    @map("place_id")
  latitude  Decimal
  longitude Decimal
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)
  user      User      @relation(fields: [userId], references: [id])

  @@unique([userId, alias])
  @@map("favorite_addresses")
}

model FavoritePlace {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  placeId   String    @map("place_id")
  latitude  Decimal
  longitude Decimal
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)
  user      User      @relation(fields: [userId], references: [id])

  @@unique([userId, placeId])
  @@map("favorite_places")
}

model ActivityTemplate {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  name        String
  description String
  activities  Json?
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, name])
  @@map("activity_templates")
}

model Fleet {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  name        String
  description String?
  maxVehicles Int?      @map("max_vehicles") @db.SmallInt
  maxDrivers  Int?      @map("max_drivers") @db.SmallInt
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)

  user     User      @relation(fields: [userId], references: [id])
  vehicles Vehicle[]
  drivers  Driver[]

  @@unique([userId, name])
  @@map("fleets")
}

model Vehicle {
  id           String    @id @default(uuid()) @db.Uuid
  userId       String    @map("user_id") @db.Uuid
  fleetId      String?   @map("fleet_id") @db.Uuid
  imageUrl     String?   @map("image_url")
  licensePlate String    @map("license_plate")
  make         String?
  model        String?
  year         Int?      @db.SmallInt
  vin          String?
  notes        String?
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)

  user  User   @relation(fields: [userId], references: [id])
  fleet Fleet? @relation(fields: [fleetId], references: [id])

  @@unique([userId, licensePlate])
  @@map("vehicles")
}

model Driver {
  id            String    @id @default(uuid()) @db.Uuid
  userId        String    @map("user_id") @db.Uuid
  fleetId       String?   @map("fleet_id") @db.Uuid
  licenseNumber String    @map("license_number")
  name          String
  imageUrl      String?   @map("image_url")
  notes         String?
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)

  user  User   @relation(fields: [userId], references: [id])
  fleet Fleet? @relation(fields: [fleetId], references: [id])

  @@unique([userId, licenseNumber])
  @@map("drivers")
}

enum TripStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

model Trip {
  id            String     @id @default(uuid()) @db.Uuid
  userId        String     @map("user_id") @db.Uuid
  tripStatus    TripStatus @default(UPCOMING) @map("trip_status")
  origin        String
  destination   String
  departureTime DateTime   @map("departure_time") @db.Timestamptz(6)
  arrivalTime   DateTime   @map("arrival_time") @db.Timestamptz(6)
  totalDistance Int?       @map("total_distance")
  totalDuration Int?       @map("total_duration")
  presets       Json?
  createdAt     DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime?  @updatedAt @map("updated_at") @db.Timestamptz(6)

  user User   @relation(fields: [userId], references: [id])
  Post Post[]

  @@map("trips")
}

enum PostStatus {
  AVAILABLE
  FULL
  COMPLETED
  CANCELLED
}

model Post {
  id               String     @id @default(uuid()) @db.Uuid
  userId           String     @map("user_id") @db.Uuid
  tripId           String     @map("trip_id") @db.Uuid
  postStatus       PostStatus @default(AVAILABLE) @map("post_status")
  isPublic         Boolean    @default(true)
  destination      String
  cityTown         String     @map("city_town")
  carrierName      String?    @map("carrier_name")
  carrierPhone     String?    @map("carrier_phone")
  pricePerKg       Decimal?   @map("price_per_kg")
  pricePerPostal   Decimal?   @map("price_per_postal")
  maxCapacityKg    Float?     @map("max_capacity_kg")
  currentFillingKg Float?     @map("current_filling_kg")
  createdAt        DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime?  @updatedAt @map("updated_at") @db.Timestamptz(6)

  user  User    @relation(fields: [userId], references: [id])
  trips Trip    @relation(fields: [tripId], references: [id])
  Order Order[]

  @@map("posts")
}

enum OrderStatus {
  PENDING
  PICKUP
  DISPATCHED
  DELIVERED
}

model Order {
  id               String      @id @default(uuid()) @db.Uuid
  postId           String      @map("post_id") @db.Uuid
  userId           String?     @map("user_id") @db.Uuid
  status           OrderStatus @default(PENDING)
  amount           Decimal
  totalWeightKg    Float       @map("total_weight_kg")
  senderName       String      @map("sender_name")
  senderAddress    String      @map("sender_address")
  senderPhone      String      @map("sender_phone")
  recipientName    String      @map("recipient_name")
  recipientAddress String      @map("recipient_address")
  recipientPhone   String      @map("recipient_phone")
  createdAt        DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime?   @updatedAt @map("updated_at") @db.Timestamptz(6)

  posts      Post        @relation(fields: [postId], references: [id])
  user       User?       @relation(fields: [userId], references: [id])
  OrderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String    @id @default(uuid()) @db.Uuid
  orderId   String    @map("order_id") @db.Uuid
  isPostal  Boolean   @default(false) @map("isPostal")
  price     Decimal
  weight    Float
  size      String
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)

  // size => "length x width x height"

  order Order @relation(fields: [orderId], references: [id])

  @@map("order_items")
}
